0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Users\\Егор\\AppData\\Local\\.meteor\\packages\\meteor-tool\\1.3.0_3\\mt-os.windows.x86_32\\dev_bundle\\bin\\\\node.exe',
1 verbose cli   'C:\\Users\\Егор\\AppData\\Local\\.meteor\\packages\\meteor-tool\\1.3.0_3\\mt-os.windows.x86_32\\dev_bundle\\lib\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'install',
1 verbose cli   '--save',
1 verbose cli   'fibers' ]
2 info using npm@2.14.22
3 info using node@v0.10.43
4 verbose install initial load of C:\Meteor\zupjs4\zupjs\package.json
5 verbose installManyTop reading scoped package data from C:\Meteor\zupjs4\zupjs\node_modules\common-node\package.json
6 verbose installManyTop reading scoped package data from C:\Meteor\zupjs4\zupjs\node_modules\magento-api\package.json
7 verbose installManyTop reading scoped package data from C:\Meteor\zupjs4\zupjs\node_modules\meteor-node-stubs\package.json
8 verbose installManyTop reading scoped package data from C:\Meteor\zupjs4\zupjs\node_modules\moysklad-client\package.json
9 verbose installManyTop reading scoped package data from C:\Meteor\zupjs4\zupjs\node_modules\xmlhttprequest\package.json
10 info package.json common-node@0.10.20 No license field.
11 info package.json moysklad-client@0.2.8 No license field.
12 verbose readDependencies loading dependencies from C:\Meteor\zupjs4\zupjs\package.json
13 silly cache add args [ 'fibers', null ]
14 verbose cache add spec fibers
15 silly cache add parsed spec { raw: 'fibers',
15 silly cache add   scope: null,
15 silly cache add   name: 'fibers',
15 silly cache add   rawSpec: '',
15 silly cache add   spec: 'latest',
15 silly cache add   type: 'tag' }
16 silly addNamed fibers@latest
17 verbose addNamed "latest" is being treated as a dist-tag for fibers
18 info addNameTag [ 'fibers', 'latest' ]
19 silly mapToRegistry name fibers
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/fibers
23 verbose addNameTag registry:https://registry.npmjs.org/fibers not in flight; fetching
24 verbose request uri https://registry.npmjs.org/fibers
25 verbose request no auth needed
26 info attempt registry request try #1 at 22:56:29
27 verbose request id 12268123aeff9127
28 verbose etag "8UMK1NKSM6VZ8PFIPHTEIYNN"
29 http request GET https://registry.npmjs.org/fibers
30 http 304 https://registry.npmjs.org/fibers
31 verbose headers { date: 'Tue, 29 Mar 2016 19:56:27 GMT',
31 verbose headers   via: '1.1 varnish',
31 verbose headers   'cache-control': 'max-age=300',
31 verbose headers   etag: '"8UMK1NKSM6VZ8PFIPHTEIYNN"',
31 verbose headers   age: '14',
31 verbose headers   connection: 'keep-alive',
31 verbose headers   'x-served-by': 'cache-fra1236-FRA',
31 verbose headers   'x-cache': 'HIT',
31 verbose headers   'x-cache-hits': '1',
31 verbose headers   'x-timer': 'S1459281387.915415,VS0,VE0',
31 verbose headers   vary: 'Accept' }
32 silly get cb [ 304,
32 silly get   { date: 'Tue, 29 Mar 2016 19:56:27 GMT',
32 silly get     via: '1.1 varnish',
32 silly get     'cache-control': 'max-age=300',
32 silly get     etag: '"8UMK1NKSM6VZ8PFIPHTEIYNN"',
32 silly get     age: '14',
32 silly get     connection: 'keep-alive',
32 silly get     'x-served-by': 'cache-fra1236-FRA',
32 silly get     'x-cache': 'HIT',
32 silly get     'x-cache-hits': '1',
32 silly get     'x-timer': 'S1459281387.915415,VS0,VE0',
32 silly get     vary: 'Accept' } ]
33 verbose etag https://registry.npmjs.org/fibers from cache
34 verbose get saving fibers to C:\Users\Егор\AppData\Roaming\npm-cache\registry.npmjs.org\fibers\.cache.json
35 verbose correctMkdir C:\Users\Егор\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
36 silly addNameTag next cb for fibers with tag latest
37 silly addNamed fibers@1.0.10
38 verbose addNamed "1.0.10" is a plain semver version for fibers
39 silly cache afterAdd fibers@1.0.10
40 verbose afterAdd C:\Users\Егор\AppData\Roaming\npm-cache\fibers\1.0.10\package\package.json not in flight; writing
41 verbose correctMkdir C:\Users\Егор\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
42 verbose afterAdd C:\Users\Егор\AppData\Roaming\npm-cache\fibers\1.0.10\package\package.json written
43 silly install resolved [ { name: 'fibers',
43 silly install resolved     version: '1.0.10',
43 silly install resolved     description: 'Cooperative multi-tasking for Javascript',
43 silly install resolved     keywords:
43 silly install resolved      [ 'fiber',
43 silly install resolved        'fibers',
43 silly install resolved        'coroutine',
43 silly install resolved        'thread',
43 silly install resolved        'async',
43 silly install resolved        'parallel',
43 silly install resolved        'worker',
43 silly install resolved        'future',
43 silly install resolved        'promise' ],
43 silly install resolved     homepage: 'https://github.com/laverdet/node-fibers',
43 silly install resolved     author:
43 silly install resolved      { name: 'Marcel Laverdet',
43 silly install resolved        email: 'marcel@laverdet.com',
43 silly install resolved        url: 'https://github.com/laverdet/' },
43 silly install resolved     main: 'fibers',
43 silly install resolved     scripts:
43 silly install resolved      { install: 'node build.js || nodejs build.js',
43 silly install resolved        test: 'node test.js || nodejs test.js' },
43 silly install resolved     repository:
43 silly install resolved      { type: 'git',
43 silly install resolved        url: 'git://github.com/laverdet/node-fibers.git' },
43 silly install resolved     license: 'MIT',
43 silly install resolved     engines: { node: '>=0.5.2' },
43 silly install resolved     readme: 'fibers(1) -- Fiber support for v8 and Node\n==========================================\n\nINSTALLING\n----------\n\n### via npm\n* `npm install fibers`\n* You\'re done!\n\n### from source\n* `git clone git://github.com/laverdet/node-fibers.git`\n* `cd node-fibers`\n* `npm install`\n\nNote: node-fibers uses [node-gyp](https://github.com/TooTallNate/node-gyp) for\nbuilding. To manually invoke the build process, you can use `node-gyp rebuild`.\nThis will put the compiled extension in `build/Release/fibers.node`. However,\nwhen you do `require(\'fibers\')`, it will expect the module to be in, for\nexample, `bin/linux-x64-v8-3.11/fibers.node`. You can manually put the module\nhere every time you build, or you can use the included build script. Either\n`npm install` or `node build -f` will do this for you. If you are going to be\nhacking on node-fibers, it may be worthwhile to first do `node-gyp configure`\nand then for subsequent rebuilds you can just do `node-gyp build` which will\nbe faster than a full `npm install` or `node-gyp rebuild`.\n\n### important!\nIt\'s recommended that you use node 0.6.18 or higher with node-fibers. Using\nother versions may lead to instability during high loads.\n\n### other notes\nUnlike most NodeJS projects, node-fibers is a C++ project. Some extra work is\nrequired to compile node-fibers, but pretty much every platform is supported\nin some way. Binary distributions in 32 and 64-bit forms are provided in npm for\nLinux, OS X, and Windows (special thanks to\n[Jeroen Janssen](https://github.com/japj) for his work on fibers in Windows).\n\nSupport for Solaris, FreeBSD, and OpenBSD is provided by compiling the extension\non your system during install time via\n[node-gyp](https://github.com/TooTallNate/node-gyp). If your operating system\nisn\'t listed here you may have luck copying the build process for one of the\nother OS\'s, assuming you are running a POSIX-like OS.\n\nnode 0.6.x is required to run this release of node-fibers. Older versions of\nnode (0.4.x) are supported in older releases of node-fibers. See the 0.5.x\nbranch of node-fibers for documentation.\n\n\nEXAMPLES\n--------\n\nThe examples below describe basic use of `Fiber`, but note that it is **not\nrecommended** to use `Fiber` without an abstraction in between your code and\nfibers. See "FUTURES" below for additional information.\n\n### Sleep\nThis is a quick example of how you can write sleep() with fibers. Note that\nwhile the sleep() call is blocking inside the fiber, node is able to handle\nother events.\n\n\t$ cat sleep.js\n\n```javascript\nvar Fiber = require(\'fibers\');\n\nfunction sleep(ms) {\n\tvar fiber = Fiber.current;\n\tsetTimeout(function() {\n\t\tfiber.run();\n\t}, ms);\n\tFiber.yield();\n}\n\nFiber(function() {\n\tconsole.log(\'wait... \' + new Date);\n\tsleep(1000);\n\tconsole.log(\'ok... \' + new Date);\n}).run();\nconsole.log(\'back in main\');\n```\n\n\t$ node sleep.js\n\twait... Fri Jan 21 2011 22:42:04 GMT+0900 (JST)\n\tback in main\n\tok... Fri Jan 21 2011 22:42:05 GMT+0900 (JST)\n\n\n### Incremental Generator\nYielding execution will resume back in the fiber right where you left off. You\ncan also pass values back and forth through yield() and run(). Again, the node\nevent loop is never blocked while this script is running.\n\n\t$ cat generator.js\n\n```javascript\nvar Fiber = require(\'fibers\');\n\nvar inc = Fiber(function(start) {\n\tvar total = start;\n\twhile (true) {\n\t\ttotal += Fiber.yield(total);\n\t}\n});\n\nfor (var ii = inc.run(1); ii <= 10; ii = inc.run(1)) {\n\tconsole.log(ii);\n}\n```\n\n\t$ node generator.js\n\t1\n\t2\n\t3\n\t4\n\t5\n\t6\n\t7\n\t8\n\t9\n\t10\n\n\n### Fibonacci Generator\nExpanding on the incremental generator above, we can create a generator which\nreturns a new Fibonacci number with each invocation. You can compare this with\nthe [ECMAScript Harmony\nGenerator](http://wiki.ecmascript.org/doku.php?id=harmony:generators) Fibonacci\nexample.\n\n\t$ cat fibonacci.js\n\n```javascript\nvar Fiber = require(\'fibers\');\n\n// Generator function. Returns a function which returns incrementing\n// Fibonacci numbers with each call.\nfunction Fibonacci() {\n\t// Create a new fiber which yields sequential Fibonacci numbers\n\tvar fiber = Fiber(function() {\n\t\tFiber.yield(0); // F(0) -> 0\n\t\tvar prev = 0, curr = 1;\n\t\twhile (true) {\n\t\t\tFiber.yield(curr);\n\t\t\tvar tmp = prev + curr;\n\t\t\tprev = curr;\n\t\t\tcurr = tmp;\n\t\t}\n\t});\n\t// Return a bound handle to `run` on this fiber\n\treturn fiber.run.bind(fiber);\n}\n\n// Initialize a new Fibonacci sequence and iterate up to 1597\nvar seq = Fibonacci();\nfor (var ii = seq(); ii <= 1597; ii = seq()) {\n\tconsole.log(ii);\n}\n```\n\n\t$ node fibonacci.js\n\t0\n\t1\n\t1\n\t2\n\t3\n\t5\n\t8\n\t13\n\t21\n\t34\n\t55\n\t89\n\t144\n\t233\n\t377\n\t610\n\t987\n\t1597\n\n\n### Basic Exceptions\nFibers are exception-safe; exceptions will continue travelling through fiber\nboundaries:\n\n\t$ cat error.js\n\n```javascript\nvar Fiber = require(\'fibers\');\n\nvar fn = Fiber(function() {\n\tconsole.log(\'async work here...\');\n\tFiber.yield();\n\tconsole.log(\'still working...\');\n\tFiber.yield();\n\tconsole.log(\'just a little bit more...\');\n\tFiber.yield();\n\tthrow new Error(\'oh crap!\');\n});\n\ntry {\n\twhile (true) {\n\t\tfn.run();\n\t}\n} catch(e) {\n\tconsole.log(\'safely caught that error!\');\n\tconsole.log(e.stack);\n}\nconsole.log(\'done!\');\n```\n\n\t$ node error.js\n\tasync work here...\n\tstill working...\n\tjust a little bit more...\n\tsafely caught that error!\n\tError: oh crap!\n\t\t\tat error.js:11:9\n\tdone!\n\n\nFUTURES\n-------\n\nUsing the `Fiber` class without an abstraction in between your code and the raw\nAPI is **not recommended**. `Fiber` is meant to implement the smallest amount of\nfunctionality in order make possible many different programming patterns. This\nmakes the `Fiber` class relatively lousy to work with directly, but extremely\npowerful when coupled with a decent abstraction. There is no right answer for\nwhich abstraction is right for you and your project. Included with `node-fibers`\nis an implementation of "futures" which is fiber-aware. Usage of this library\nis documented below. There are several other externally-maintained options\nwhich can be found on the [wiki](https://github.com/laverdet/node-fibers/wiki).\nYou **should** feel encouraged to be creative with fibers and build a solution\nwhich works well with your project. For instance, `Future` is not a good\nabstraction to use if you want to build a generator function (see Fibonacci\nexample above).\n\nUsing `Future` to wrap existing node functions. At no point is the node event\nloop blocked:\n\n\t$ cat ls.js\n\n```javascript\nvar Future = require(\'fibers/future\');\nvar fs = Future.wrap(require(\'fs\'));\n\nFuture.task(function() {\n\t// Get a list of files in the directory\n\tvar fileNames = fs.readdirFuture(\'.\').wait();\n\tconsole.log(\'Found \'+ fileNames.length+ \' files\');\n\n\t// Stat each file\n\tvar stats = [];\n\tfor (var ii = 0; ii < fileNames.length; ++ii) {\n\t\tstats.push(fs.statFuture(fileNames[ii]));\n\t}\n\tstats.map(function(f) {\n\t\tf.wait()\n\t});\n\n\t// Print file size\n\tfor (var ii = 0; ii < fileNames.length; ++ii) {\n\t\tconsole.log(fileNames[ii]+ \': \'+ stats[ii].get().size);\n\t}\n}).detach();\n```\n\n\t$ node ls.js \n\tFound 11 files\n\tbin: 4096\n\tfibers.js: 1708\n\t.gitignore: 37\n\tREADME.md: 8664\n\tfuture.js: 5833\n\t.git: 4096\n\tLICENSE: 1054\n\tsrc: 4096\n\tls.js: 860\n\tMakefile: 436\n\tpackage.json: 684\n\n\nThe future API is designed to make it easy to move between classic\ncallback-style code and fiber-aware waiting code:\n\n\t$ cat sleep.js\n\n```javascript\nvar Future = require(\'fibers/future\'), wait = Future.wait;\n\n// This function returns a future which resolves after a timeout. This\n// demonstrates manually resolving futures.\nfunction sleep(ms) {\n\tvar future = new Future;\n\tsetTimeout(function() {\n\t\tfuture.return();\n\t}, ms);\n\treturn future;\n}\n\n// You can create functions which automatically run in their own fiber and\n// return futures that resolve when the fiber returns (this probably sounds\n// confusing.. just play with it to understand).\nvar calcTimerDelta = function(ms) {\n\tvar start = new Date;\n\tsleep(ms).wait();\n\treturn new Date - start;\n}.future(); // <-- important!\n\n// And futures also include node-friendly callbacks if you don\'t want to use\n// wait()\ncalcTimerDelta(2000).resolve(function(err, val) {\n\tconsole.log(\'Set timer for 2000ms, waited \'+ val+ \'ms\');\n});\n```\n\n\t$ node sleep.js\n\tSet timer for 2000ms, waited 2009ms\n\n\nAPI DOCUMENTATION\n-----------------\nFiber\'s definition looks something like this:\n\n```javascript\n/**\n * Instantiate a new Fiber. You may invoke this either as a function or as\n * a constructor; the behavior is the same.\n *\n * When run() is called on this fiber for the first time, `fn` will be\n * invoked as the first frame on a new stack. Execution will continue on\n * this new stack until `fn` returns, or Fiber.yield() is called.\n *\n * After the function returns the fiber is reset to original state and\n * may be restarted with another call to run().\n */\nfunction Fiber(fn) {\n\t[native code]\n}\n\n/**\n * `Fiber.current` will contain the currently-running Fiber. It will be\n * `undefined` if there is no fiber (i.e. the main stack of execution).\n *\n * See "Garbage Collection" for more information on responsible use of\n * `Fiber.current`.\n */\nFiber.current = undefined;\n\n/**\n * `Fiber.yield()` will halt execution of the current fiber and return control\n * back to original caller of run(). If an argument is supplied to yield(),\n * run() will return that value.\n *\n * When run() is called again, yield() will return.\n *\n * Note that this function is a global to allow for correct garbage\n * collection. This results in no loss of functionality because it is only\n * valid to yield from the currently running fiber anyway.\n *\n * Note also that `yield` is a reserved word in Javascript. This is normally\n * not an issue, however some code linters may complain. Rest assured that it\n * will run fine now and in future versions of Javascript.\n */\nFiber.yield = function(param) {\n\t[native code]\n}\n\n/**\n * run() will start execution of this Fiber, or if it is currently yielding,\n * it will resume execution. If an argument is supplied, this argument will\n * be passed to the fiber, either as the first parameter to the main\n * function [if the fiber has not been started] or as the return value of\n * yield() [if the fiber is currently yielding].\n *\n * This function will return either the parameter passed to yield(), or the\n * returned value from the fiber\'s main function.\n */\nFiber.prototype.run = function(param) {\n\t[native code]\n}\n\n/**\n * reset() will terminate a running Fiber and restore it to its original\n * state, as if it had returned execution.\n *\n * This is accomplished by causing yield() to throw an exception, and any\n * futher calls to yield() will also throw an exception. This continues\n * until the fiber has completely unwound and returns.\n *\n * If the fiber returns a value it will be returned by reset().\n *\n * If the fiber is not running, reset() will have no effect.\n */\nFiber.prototype.reset = function() {\n\t[native code]\n}\n\n/**\n * throwInto() will cause a currently yielding fiber\'s yield() call to\n * throw instead of return gracefully. This can be useful for notifying a\n * fiber that you are no longer interested in its task, and that it should\n * give up.\n *\n * Note that if the fiber does not handle the exception it will continue to\n * bubble up and throwInto() will throw the exception right back at you.\n */\nFiber.prototype.throwInto = function(exception) {\n\t[native code]\n}\n```\n\n\nFuture\'s definition looks something like this:\n\n```javascript\n/**\n * Returns a future-function which, when run, starts running the target\n * function and returns a future for the result.\n * \n * Example usage: \n * var funcy = function(arg) {\n *   return arg+1;\n * }.future();\n * \n * funcy(1).wait(); // returns 2\n */\nFunction.prototype.future = function() { ... }\n\n/**\n * Future object, instantiated with the new operator.\n */\nfunction Future() {}\n\n/**\n * Wrap a node-style async function to return a future in place of using a callback.\n * \n * fn - the function or object to wrap\n * array - indicates that this callback will return more than 1 argument after `err`. For example,\n *         `child_process.exec()` returns [err, stdout, stderr]\n * suffix - appends a string to every method that was overridden, if you passed an object\n * \n * Example usage: Future.wrap(asyncFunction)(arg1).wait()\n */\nFuture.wrap = function(fn, multi, suffix) { ... }\n\n/**\n * Invoke a function that will be run in its own fiber context and return a future to its return\n * value.\n *\n * Example:\n * Future.task(function() {\n *   // You can safely `wait` on stuff here\n * }).detach();\n */\nFuture.task = function(fn) { ... }\n\n/**\n * Wait on a series of futures and then return. If the futures throw an exception this function\n * /won\'t/ throw it back. You can get the value of the future by calling get() on it directly. If\n * you want to wait on a single future you\'re better off calling future.wait() on the instance.\n * \n * Example usage: Future.wait(aFuture, anotherFuture)\n */\nFuture.wait = function(/* ... */) { ... }\n\n/**\n * Return the value of this future. If the future hasn\'t resolved yet this will throw an error.\n */\nFuture.prototype.get = function() { ... }\n\n/**\n * Mark this future as returned. All pending callbacks will be invoked immediately.\n * \n * value - the value to return when get() or wait() is called.\n * \n * Example usage: aFuture.return(value)\n */\nFuture.prototype.return = function(value) { ... }\n\n/**\n * Throw from this future as returned. All pending callbacks will be invoked immediately.\n * Note that execution will continue normally after running this method, \n * so make sure you exit appropriately after running throw()\n * \n * error - the error to throw when get() or wait() is called.\n * \n * Example usage: aFuture.throw(new Error("Something borked"))\n */\nFuture.prototype.throw = function(error) { ... }\n\n/**\n * "detach" this future. Basically this is useful if you want to run a task in a future, you\n * aren\'t interested in its return value, but if it throws you don\'t want the exception to be\n * lost. If this fiber throws, an exception will be thrown to the event loop and node will\n * probably fall down.\n */\nFuture.prototype.detach = function() { ... }\n\n/**\n * Returns whether or not this future has resolved yet.\n */\nFuture.prototype.isResolved = function() { ... }\n\n/**\n * Returns a node-style function which will mark this future as resolved when called.\n * \n * Example usage: \n *   var errback = aFuture.resolver();\n *   asyncFunction(arg1, arg2, etc, errback)\n *   var result = aFuture.wait();\n */\nFuture.prototype.resolver = function() { ... }\n\n/**\n * Waits for this future to resolve and then invokes a callback.\n *\n * If only one argument is passed it is a standard function(err, val){} errback.\n *\n * If two arguments are passed, the first argument is a future which will be thrown to in the case\n * of error, and the second is a function(val){} callback.\n */\nFuture.prototype.resolve = function(/* errback or future, callback */) { ... }\n\n/**\n * Propogate results to another future.\n * \n * Example usage: future1.proxy(future2) // future2 gets automatically resolved with however future1 resolves\n */\nFuture.prototype.proxy = function(future) { ... }\n\n/**\n * Differs from its functional counterpart in that it actually resolves the future. Thus if the\n * future threw, future.wait() will throw.\n */\nFuture.prototype.wait = function() { ... }\n\n/**\n * Support for converting a Future to and from ES6 Promises.\n */\nFuture.fromPromise = function(promise) { ... }\nFuture.prototype.promise = function() { ... }\n```\n\nGARBAGE COLLECTION\n------------------\n\nIf you intend to build generators, iterators, or "lazy lists", you should be\naware that all fibers must eventually unwind. This is implemented by causing\nyield() to throw unconditionally when the library is trying to unwind your\nfiber-- either because reset() was called, or all handles to the fiber were lost\nand v8 wants to delete it.\n\nSomething like this will, at some point, cause an infinite loop in your\napplication:\n\n```javascript\nvar fiber = Fiber(function() {\n\twhile (true) {\n\t\ttry {\n\t\t\tFiber.yield();\n\t\t} catch(e) {}\n\t}\n});\nfiber.run();\n```\n\nIf you either call reset() on this fiber, or the v8 garbage collector decides it\nis no longer in use, the fiber library will attempt to unwind the fiber by\ncausing all calls to yield() to throw. However, if you catch these exceptions\nand continue anyway, an infinite loop will occur.\n\nThere are other garbage collection issues that occur with misuse of fiber\nhandles. If you grab a handle to a fiber from within itself, you should make\nsure that the fiber eventually unwinds. This application will leak memory:\n\n```javascript\nvar fiber = Fiber(function() {\n\tvar that = Fiber.current;\n\tFiber.yield();\n}\nfiber.run();\nfiber = undefined;\n```\n\nThere is no way to get back into the fiber that was started, however it\'s\nimpossible for v8\'s garbage collector to detect this. With a handle to the fiber\nstill outstanding, v8 will never garbage collect it and the stack will remain in\nmemory until the application exits.\n\nThus, you should take care when grabbing references to `Fiber.current`.\n',
43 silly install resolved     readmeFilename: 'README.md',
43 silly install resolved     bugs: { url: 'https://github.com/laverdet/node-fibers/issues' },
43 silly install resolved     _id: 'fibers@1.0.10',
43 silly install resolved     _shasum: '0ccea7287e5dafd2626c2c9d3f15113a1b5829cd',
43 silly install resolved     _from: 'fibers@latest',
43 silly install resolved     _resolved: 'https://registry.npmjs.org/fibers/-/fibers-1.0.10.tgz' } ]
44 info install fibers@1.0.10 into C:\Meteor\zupjs4\zupjs
45 info installOne fibers@1.0.10
46 verbose installOne of fibers to C:\Meteor\zupjs4\zupjs not in flight; installing
47 verbose correctMkdir C:\Users\Егор\AppData\Roaming\npm-cache\_locks correctMkdir not in flight; initializing
48 verbose lock using C:\Users\Егор\AppData\Roaming\npm-cache\_locks\fibers-769700e8d12c08c8.lock for C:\Meteor\zupjs4\zupjs\node_modules\fibers
49 silly install write writing fibers 1.0.10 to C:\Meteor\zupjs4\zupjs\node_modules\fibers
50 verbose unbuild node_modules\fibers
51 silly gentlyRm C:\Meteor\zupjs4\zupjs\node_modules\fibers is being purged from base C:\Meteor\zupjs4\zupjs
52 verbose gentlyRm don't care about contents; nuking C:\Meteor\zupjs4\zupjs\node_modules\fibers
53 verbose tar unpack C:\Users\Егор\AppData\Roaming\npm-cache\fibers\1.0.10\package.tgz
54 verbose tar unpacking to C:\Meteor\zupjs4\zupjs\node_modules\fibers
55 silly gentlyRm C:\Meteor\zupjs4\zupjs\node_modules\fibers is being purged
56 verbose gentlyRm don't care about contents; nuking C:\Meteor\zupjs4\zupjs\node_modules\fibers
57 silly gunzTarPerm modes [ '777', '666' ]
58 silly gunzTarPerm extractEntry package.json
59 silly gunzTarPerm modified mode [ 'package.json', 420, 438 ]
60 silly gunzTarPerm extractEntry .npmignore
61 silly gunzTarPerm modified mode [ '.npmignore', 420, 438 ]
62 silly gunzTarPerm extractEntry README.md
63 silly gunzTarPerm modified mode [ 'README.md', 420, 438 ]
64 silly gunzTarPerm extractEntry LICENSE
65 silly gunzTarPerm modified mode [ 'LICENSE', 420, 438 ]
66 silly gunzTarPerm extractEntry quick-test.js
67 silly gunzTarPerm modified mode [ 'quick-test.js', 420, 438 ]
68 silly gunzTarPerm extractEntry future.js
69 silly gunzTarPerm modified mode [ 'future.js', 420, 438 ]
70 silly gunzTarPerm extractEntry build.js
71 silly gunzTarPerm modified mode [ 'build.js', 493, 511 ]
72 silly gunzTarPerm extractEntry test.js
73 silly gunzTarPerm modified mode [ 'test.js', 493, 511 ]
74 silly gunzTarPerm extractEntry fibers.js
75 silly gunzTarPerm modified mode [ 'fibers.js', 420, 438 ]
76 silly gunzTarPerm extractEntry note.txt
77 silly gunzTarPerm modified mode [ 'note.txt', 420, 438 ]
78 silly gunzTarPerm extractEntry binding.gyp
79 silly gunzTarPerm modified mode [ 'binding.gyp', 420, 438 ]
80 silly gunzTarPerm extractEntry bin/.npmignore
81 silly gunzTarPerm modified mode [ 'bin/.npmignore', 420, 438 ]
82 silly gunzTarPerm extractEntry bin/win32-x64-v8-4.6/fibers.node
83 silly gunzTarPerm modified mode [ 'bin/win32-x64-v8-4.6/fibers.node', 420, 438 ]
84 silly gunzTarPerm extractEntry bin/darwin-ia32-v8-4.6/fibers.node
85 silly gunzTarPerm modified mode [ 'bin/darwin-ia32-v8-4.6/fibers.node', 493, 511 ]
86 silly gunzTarPerm extractEntry bin/darwin-x64-v8-4.5/fibers.node
87 silly gunzTarPerm modified mode [ 'bin/darwin-x64-v8-4.5/fibers.node', 493, 511 ]
88 silly gunzTarPerm extractEntry bin/darwin-x64-v8-4.6/fibers.node
89 silly gunzTarPerm modified mode [ 'bin/darwin-x64-v8-4.6/fibers.node', 493, 511 ]
90 silly gunzTarPerm extractEntry bin/linux-ia32-v8-4.5/fibers.node
91 silly gunzTarPerm modified mode [ 'bin/linux-ia32-v8-4.5/fibers.node', 493, 511 ]
92 silly gunzTarPerm extractEntry bin/linux-ia32-v8-4.6/fibers.node
93 silly gunzTarPerm modified mode [ 'bin/linux-ia32-v8-4.6/fibers.node', 493, 511 ]
94 silly gunzTarPerm extractEntry bin/darwin-ia32-v8-4.5/fibers.node
95 silly gunzTarPerm modified mode [ 'bin/darwin-ia32-v8-4.5/fibers.node', 493, 511 ]
96 silly gunzTarPerm extractEntry bin/linux-x64-v8-4.6/fibers.node
97 silly gunzTarPerm modified mode [ 'bin/linux-x64-v8-4.6/fibers.node', 493, 511 ]
98 silly gunzTarPerm extractEntry bin/repl
99 silly gunzTarPerm modified mode [ 'bin/repl', 493, 511 ]
100 silly gunzTarPerm extractEntry bin/win32-ia32-v8-4.5/fibers.node
101 silly gunzTarPerm modified mode [ 'bin/win32-ia32-v8-4.5/fibers.node', 420, 438 ]
102 silly gunzTarPerm extractEntry bin/win32-ia32-v8-4.6/fibers.node
103 silly gunzTarPerm modified mode [ 'bin/win32-ia32-v8-4.6/fibers.node', 420, 438 ]
104 silly gunzTarPerm extractEntry bin/win32-x64-v8-4.5/fibers.node
105 silly gunzTarPerm modified mode [ 'bin/win32-x64-v8-4.5/fibers.node', 420, 438 ]
106 silly gunzTarPerm extractEntry bin/linux-x64-v8-4.5/fibers.node
107 silly gunzTarPerm modified mode [ 'bin/linux-x64-v8-4.5/fibers.node', 493, 511 ]
108 silly gunzTarPerm extractEntry src/coroutine.cc
109 silly gunzTarPerm modified mode [ 'src/coroutine.cc', 420, 438 ]
110 silly gunzTarPerm extractEntry src/coroutine.h
111 silly gunzTarPerm modified mode [ 'src/coroutine.h', 420, 438 ]
112 silly gunzTarPerm extractEntry src/fibers.cc
113 silly gunzTarPerm modified mode [ 'src/fibers.cc', 420, 438 ]
114 silly gunzTarPerm extractEntry src/libcoro/README
115 silly gunzTarPerm modified mode [ 'src/libcoro/README', 420, 438 ]
116 silly gunzTarPerm extractEntry src/libcoro/LICENSE
117 silly gunzTarPerm modified mode [ 'src/libcoro/LICENSE', 420, 438 ]
118 silly gunzTarPerm extractEntry src/libcoro/conftest.c
119 silly gunzTarPerm modified mode [ 'src/libcoro/conftest.c', 420, 438 ]
120 silly gunzTarPerm extractEntry src/libcoro/coro.c
121 silly gunzTarPerm modified mode [ 'src/libcoro/coro.c', 420, 438 ]
122 silly gunzTarPerm extractEntry src/libcoro/coro.h
123 silly gunzTarPerm modified mode [ 'src/libcoro/coro.h', 420, 438 ]
124 silly gunzTarPerm extractEntry test/already-running.js
125 silly gunzTarPerm modified mode [ 'test/already-running.js', 420, 438 ]
126 silly gunzTarPerm extractEntry test/exit.js
127 silly gunzTarPerm modified mode [ 'test/exit.js', 420, 438 ]
128 silly gunzTarPerm extractEntry test/fibonacci.js
129 silly gunzTarPerm modified mode [ 'test/fibonacci.js', 420, 438 ]
130 silly gunzTarPerm extractEntry test/finish-multiple.js
131 silly gunzTarPerm modified mode [ 'test/finish-multiple.js', 420, 438 ]
132 silly gunzTarPerm extractEntry test/future-exception.js
133 silly gunzTarPerm modified mode [ 'test/future-exception.js', 420, 438 ]
134 silly gunzTarPerm extractEntry test/exec.js
135 silly gunzTarPerm modified mode [ 'test/exec.js', 420, 438 ]
136 silly gunzTarPerm extractEntry test/illegal-yield.js
137 silly gunzTarPerm modified mode [ 'test/illegal-yield.js', 420, 438 ]
138 silly gunzTarPerm extractEntry test/pool.js
139 silly gunzTarPerm modified mode [ 'test/pool.js', 420, 438 ]
140 silly gunzTarPerm extractEntry test/process-title.js
141 silly gunzTarPerm modified mode [ 'test/process-title.js', 420, 438 ]
142 silly gunzTarPerm extractEntry test/stack-overflow.js
143 silly gunzTarPerm modified mode [ 'test/stack-overflow.js', 420, 438 ]
144 silly gunzTarPerm extractEntry test/stack-overflow2.js
145 silly gunzTarPerm modified mode [ 'test/stack-overflow2.js', 493, 511 ]
146 silly gunzTarPerm extractEntry test/current.js
147 silly gunzTarPerm modified mode [ 'test/current.js', 420, 438 ]
148 silly gunzTarPerm extractEntry test/stack-overflow3.js
149 silly gunzTarPerm modified mode [ 'test/stack-overflow3.js', 420, 438 ]
150 silly gunzTarPerm extractEntry test/child-process.js
151 silly gunzTarPerm modified mode [ 'test/child-process.js', 420, 438 ]
152 silly gunzTarPerm extractEntry test/started.js
153 silly gunzTarPerm modified mode [ 'test/started.js', 420, 438 ]
154 silly gunzTarPerm extractEntry test/bad-context.js
155 silly gunzTarPerm modified mode [ 'test/bad-context.js', 420, 438 ]
156 silly gunzTarPerm extractEntry test/unwind.js
157 silly gunzTarPerm modified mode [ 'test/unwind.js', 420, 438 ]
158 silly gunzTarPerm extractEntry test/future.js
159 silly gunzTarPerm modified mode [ 'test/future.js', 420, 438 ]
160 verbose write writing to C:\Meteor\zupjs4\zupjs\node_modules\fibers\package.json
161 info preinstall fibers@1.0.10
162 verbose readDependencies loading dependencies from C:\Meteor\zupjs4\zupjs\node_modules\fibers\package.json
163 verbose readDependencies loading dependencies from C:\Meteor\zupjs4\zupjs\node_modules\fibers\package.json
164 silly install resolved []
165 verbose about to build C:\Meteor\zupjs4\zupjs\node_modules\fibers
166 info build C:\Meteor\zupjs4\zupjs\node_modules\fibers
167 info linkStuff fibers@1.0.10
168 silly linkStuff fibers@1.0.10 has C:\Meteor\zupjs4\zupjs\node_modules as its parent node_modules
169 verbose linkBins fibers@1.0.10
170 verbose linkMans fibers@1.0.10
171 verbose rebuildBundles fibers@1.0.10
172 info install fibers@1.0.10
173 verbose unsafe-perm in lifecycle true
174 info fibers@1.0.10 Failed to exec install script
175 verbose unlock done using C:\Users\Егор\AppData\Roaming\npm-cache\_locks\fibers-769700e8d12c08c8.lock for C:\Meteor\zupjs4\zupjs\node_modules\fibers
176 verbose stack Error: fibers@1.0.10 install: `node build.js || nodejs build.js`
176 verbose stack Exit status 1
176 verbose stack     at EventEmitter.<anonymous> (C:\Users\Егор\AppData\Local\.meteor\packages\meteor-tool\1.3.0_3\mt-os.windows.x86_32\dev_bundle\lib\node_modules\npm\lib\utils\lifecycle.js:217:16)
176 verbose stack     at EventEmitter.emit (events.js:98:17)
176 verbose stack     at ChildProcess.<anonymous> (C:\Users\Егор\AppData\Local\.meteor\packages\meteor-tool\1.3.0_3\mt-os.windows.x86_32\dev_bundle\lib\node_modules\npm\lib\utils\spawn.js:24:14)
176 verbose stack     at ChildProcess.emit (events.js:98:17)
176 verbose stack     at maybeClose (child_process.js:766:16)
176 verbose stack     at Process.ChildProcess._handle.onexit (child_process.js:833:5)
177 verbose pkgid fibers@1.0.10
178 verbose cwd C:\Meteor\zupjs4\zupjs
179 error Windows_NT 10.0.10240
180 error argv "C:\\Users\\Егор\\AppData\\Local\\.meteor\\packages\\meteor-tool\\1.3.0_3\\mt-os.windows.x86_32\\dev_bundle\\bin\\\\node.exe" "C:\\Users\\Егор\\AppData\\Local\\.meteor\\packages\\meteor-tool\\1.3.0_3\\mt-os.windows.x86_32\\dev_bundle\\lib\\node_modules\\npm\\bin\\npm-cli.js" "install" "--save" "fibers"
181 error node v0.10.43
182 error npm  v2.14.22
183 error code ELIFECYCLE
184 error fibers@1.0.10 install: `node build.js || nodejs build.js`
184 error Exit status 1
185 error Failed at the fibers@1.0.10 install script 'node build.js || nodejs build.js'.
185 error This is most likely a problem with the fibers package,
185 error not with npm itself.
185 error Tell the author that this fails on your system:
185 error     node build.js || nodejs build.js
185 error You can get information on how to open an issue for this project with:
185 error     npm bugs fibers
185 error Or if that isn't available, you can get their info via:
185 error
185 error     npm owner ls fibers
185 error There is likely additional logging output above.
186 verbose exit [ 1, true ]
187 verbose unbuild node_modules\fibers
188 info preuninstall fibers@1.0.10
189 info uninstall fibers@1.0.10
190 verbose unbuild rmStuff fibers@1.0.10 from C:\Meteor\zupjs4\zupjs\node_modules
191 info postuninstall fibers@1.0.10
192 silly gentlyRm C:\Meteor\zupjs4\zupjs\node_modules\fibers is being purged from base C:\Meteor\zupjs4\zupjs
193 verbose gentlyRm don't care about contents; nuking C:\Meteor\zupjs4\zupjs\node_modules\fibers
194 silly vacuum-fs purging C:\Meteor\zupjs4\zupjs\node_modules\fibers
195 silly vacuum-fs quitting because other entries in C:\Meteor\zupjs4\zupjs\node_modules
